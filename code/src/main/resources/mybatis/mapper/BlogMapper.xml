<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="weibo/BlogMapper">
    <select id="queryThumbUpCount" resultType="int" parameterType="int">
        SELECT COUNT(*) FROM thumb_up WHERE
        -- 如果传进来的是用户就返回用户的点赞数
        <if test="uid != null">user_id = #{uid}</if>
        -- 如果传进来是博客就返回博客的点赞数
        <if test="bid != null">blog_id = #{bid}</if>
    </select>

    <select id="queryCommentCount" resultType="int" parameterType="int">
        SELECT COUNT(*) FROM blog WHERE
        <if test="bid != null">comment_on = #{bid}</if>
    </select>

    <!-- 搜索博客 -->
    <select id="selectBlog" parameterType="Map" resultType="Map">  <!-- 书写 SQL 语句 -->
        SELECT *,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=blog.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=blog.bid) AS likeNum
        FROM blog
        JOIN user
        on blog.user_id=user.uid AND user.alive = 0 AND user.is_ban = 0
        WHERE
        (blog.content LIKE "%"#{keyword}"%"
        OR user.nickname LIKE "%"#{keyword}"%"
        OR user.motto LIKE "%"#{keyword}"%"
        ) AND
        blog.release_time &lt; #{nowtime} and #{nowtime} &gt;= blog.release_time AND
        blog.visibility=0 AND blog.type=0
    </select>

    <!-- 搜索一定时间内的博客 -->
    <select id="selectBlogByTime" parameterType="Map" resultType="Map">
        SELECT
            *,
            (SELECT count(bl.bid)
             FROM blog bl
             WHERE bl.comment_on = b.bid AND type = 2) AS commentNum,
            (SELECT count(tu.tuid)
             FROM thumb_up tu
             WHERE tu.blog_id = b.bid)                 AS likeNum
        FROM blog AS b
        JOIN user AS u
        on b.user_id=u.uid AND u.alive = 0 AND u.is_ban = 0
        WHERE (#{release_time} &lt;= b.release_time and #{nowtime} &gt;= b.release_time) AND
              type IN (0,1) AND
              visibility=0
        ORDER BY u.weight DESC
    </select>
    <!-- 插入搜索记录 -->
    <insert id="insertSearchBlog" parameterType="Map">  <!-- 书写 SQL 语句 -->
        INSERT INTO search_log(user_id,content,date)
        VALUES(#{userid},#{keyword},#{nowtime})
    </insert>

    <!-- 搜索关注者的微博 -->
    <select id="getFollowBlogByUserid" parameterType="int" resultType="Map">  <!-- 书写 SQL 语句 -->
        select DISTINCT *
        from
        (
        SELECT b.*,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=b.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=b.bid) AS likeNum
        FROM blog AS b
        LEFT JOIN follow AS f
        ON f.followed_id=b.user_id AND (f.type = 2 or f.type = 0)
        WHERE f.user_id=#{uid}
        ) as t
        JOIN user AS u
        on t.user_id=u.uid AND u.alive = 0 AND u.is_ban = 0
        WHERE t.type=0
        AND t.visibility=0
        and t.release_time &lt;= unix_timestamp(now())
        group by t.bid
    </select>

    <!-- 得到今日热点微博 -->
    <select id="getTodayHostBlog" parameterType="Map" resultType="Map">  <!-- 书写 SQL 语句 -->
        SELECT *,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=b.bid AND type=1) AS reshareNum,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=b.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=b.bid) AS likeNum
        FROM blog b
        join user as u
        on u.uid = b.user_id
        AND u.alive = 0 AND u.is_ban = 0
        AND b.type=0
        AND b.visibility=0
        and b.release_time &lt;= unix_timestamp(now())  AND b.release_time >= (unix_timestamp(now()) - 86400)
    </select>

    <!-- 得到指定用户微博 -->
    <select id="getUserBlogByUserid" parameterType="int" resultType="Map">  <!-- 书写 SQL 语句 -->
        SELECT *,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=b.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=b.bid) AS likeNum
        FROM blog AS b
        JOIN user AS u
        on b.user_id=u.uid
        WHERE u.uid=#{uid}
        AND u.alive = 0 AND u.is_ban = 0
        AND b.type &lt;= 1
        AND b.visibility=0
        and b.release_time &lt;= unix_timestamp(now())
        ORDER BY b.release_time DESC
    </select>

    <!-- 查用户是否被封禁 -->
    <select id="checkAdmin" parameterType="int" resultType="int">
        SELECT user.is_ban
        FROM user
        WHERE user.uid = #{userid}
    </select>

    <!-- 发布博客 -->

    <insert id="submitBlog" parameterType="Blog" useGeneratedKeys="true" keyProperty="bid">
        INSERT INTO blog (user_id, content, multimedia, release_time, type, comment_on, visibility, is_edit, ip_address, browser_sign, is_showName)
            VALUE
            (#{user_id}, #{content}, #{multimedia}, #{release_time}, #{type}, #{comment_on}, #{visibility}, #{is_edit},
                         #{ip_address}, #{browser_sign}, #{is_showName})
    </insert>

    <select id="getBlogById" parameterType="int" resultType="map">
         SELECT *,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=b.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=b.bid) AS likeNum
        FROM blog AS b
        JOIN user AS u
        on b.user_id=u.uid AND u.alive = 0 AND u.is_ban = 0
        WHERE b.bid = #{bid} AND b.visibility = 0 and b.release_time &lt;= unix_timestamp(now())

    </select>

    <select id="getCommitById" parameterType="int" resultType="map">
        SELECT *,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=b.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=b.bid) AS likeNum
        FROM blog AS b
        JOIN user AS u
        on b.user_id=u.uid AND u.alive = 0 AND u.is_ban = 0
        WHERE b.type = 2 AND b.comment_on = #{bid} AND b.visibility = 0 and b.release_time &lt;= unix_timestamp(now())

    </select>

    <select id="getFavorite" parameterType="int" resultType="map">
        SELECT fbz.*,b.*,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=b.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=b.bid) AS likeNum
        FROM favorite as f
        JOIN blog AS b
        ON b.bid = f.blog_id
        JOIN user AS fbz
        ON b.user_id = fbz.uid
        JOIN user AS u
        on f.user_id=u.uid
        WHERE b.visibility = 0 AND f.user_id = #{uid} and b.release_time &lt;= unix_timestamp(now())

    </select>

    <select id="getCallat" parameterType="int" resultType="map">
        SELECT *,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=b.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=b.bid) AS likeNum
        FROM call_at as c
        JOIN blog AS b
        ON b.bid = c.blog_id
        JOIN user AS u
        on c.user_id=u.uid
        WHERE b.visibility = 0 AND c.at_userid=#{uid}
        and b.release_time &lt;= unix_timestamp(now())

    </select>

    <!-- 删除微博 查用户 -->
    <update id="delBlog" parameterType="int">
        UPDATE blog
        SET visibility = 2
        WHERE
            bid = #{bid}
    </update>

    <!-- 修改微博 用户被封不能改 一天修改微博次数限制-->
    <select id="checkUpdateNum" parameterType="int" resultType="Map">
        SELECT
            blog.is_edit,
            blog.release_time
        FROM blog
        WHERE blog.bid = #{bid}
    </select>
    <update id="clearUpdateNum" parameterType="int">
        UPDATE blog
        SET blog.is_edit = 1
        WHERE blog.bid = #{bid}
    </update>
    <update id="setBlog" parameterType="blog">
        UPDATE blog
        SET content      = #{content},
            release_time = #{release_time},
            multimedia   = #{multimedia},
            visibility   = #{visibility},
            is_edit      = is_edit + 1
        WHERE
            bid = #{bid}
    </update>

    <!-- 发布博客评论 查用户是否被封  -->
    <insert id="commit" parameterType="Blog" useGeneratedKeys="true" keyProperty="bid">
        INSERT INTO blog (user_id, content, multimedia, release_time, type, comment_on, visibility, is_edit, ip_address, browser_sign, is_showName)
            VALUE
            (#{user_id}, #{content}, #{multimedia}, #{release_time}, #{type}, #{comment_on}, #{visibility}, #{is_edit},
                         #{ip_address}, #{browser_sign}, #{is_showName})
    </insert>

    <!-- 点赞微博-->
    <select id="checkThumbUp" parameterType="ThumbUp" resultType="Map">
        SELECT tuid
        FROM thumb_up
        WHERE
            user_id = #{user_id}
            AND
            blog_id = #{blog_id}
    </select>

    <insert id="addThumbUp" parameterType="ThumbUp" useGeneratedKeys="true" keyProperty="tuid">
        INSERT INTO thumb_up (user_id, blog_id, date, t_id)
            VALUE (#{user_id}, #{blog_id}, #{date}, #{t_id})
    </insert>

    <delete id="delThumbUp" parameterType="int">
        DELETE FROM thumb_up
        WHERE tuid = #{tuid}
    </delete>

    <!-- @用户-->
    <select id="getFiveUser" parameterType="String" resultType="User">
        SELECT *
        FROM user
        WHERE
        <if test="#{_parameter}!=null">
            user.nickname LIKE "%"#{_parameter}"%"
        </if>
        limit 5

    </select>

    <insert id="atUser" parameterType="CallAt" useGeneratedKeys="true" keyProperty="cid">
        INSERT INTO call_at (user_id, blog_id, date,at_userid)
            VALUE (#{user_id}, #{blog_id}, #{date},#{at_userid})
    </insert>

    <!--#话题 -->
    <select id="getFiveDiscuss" parameterType="Map" resultType="Discuss">
        SELECT *
        FROM discuss
        WHERE
        discuss.visibility=0
        <if test="#{name}!=null">
            AND discuss.name LIKE "%"#{name}"%"
        </if>
        <if test="#{NowTime}!=null">
            AND #{NowTime}&gt;discuss.start_time
        </if>
        limit 5
    </select>

    <insert id="addDisBlog" parameterType="BlogDiscuss" useGeneratedKeys="true" keyProperty="bdid">
        INSERT INTO blog_discuss (blog_id,discuss_id,user_id)
        VALUE (#{blog_id}, #{discuss_id}, #{user_id})
    </insert>
    <!-- 转发微博 只能转发一次-->
    <select id="CheckforwardBlog" parameterType="Map" resultType="Blog">
        SELECT *
        FROM blog
        WHERE type = 1 AND user_id = #{user_id} AND comment_on = #{comment_on}
    </select>
    <select id="GetforwardBlog" parameterType="int" resultType="Blog">
        SELECT *
        FROM blog
        WHERE blog.bid = #{bid}
              AND blog.type = 0 AND blog.visibility = 0
    </select>


    <!-- 收藏微博 是否已经收藏 收藏微博是否被举报-->
    <select id="Checkcollect" parameterType="Map" resultType="Favorite">
        SELECT *
        FROM favorite
        WHERE user_id = #{user_id} AND blog_id = #{blog_id}
    </select>
    <insert id="collectBlog" parameterType="Favorite" useGeneratedKeys="true" keyProperty="fid">
        INSERT INTO favorite (user_id, blog_id, time, visibility)
            VALUE (#{user_id}, #{blog_id}, #{time}, #{visibility})
    </insert>
    <delete id="delcollect" parameterType="int">
        DELETE FROM favorite
        WHERE fid = #{fid}
    </delete>

    <!-- 举报微博 -->
    <insert id="reportBlog" parameterType="Sensitivity" useGeneratedKeys="true" keyProperty="sid">
        INSERT INTO sensitivity (blog_id, type, details, time,visibility,user_id)
            VALUE (#{blog_id}, #{type}, #{details}, #{time},#{visibility},#{user_id})
    </insert>

    <!-- 向blog_discuss插入记录 -->
    <insert id="blogDiscuss" parameterType="BlogDiscuss" useGeneratedKeys="true" keyProperty="bdid">
        INSERT INTO blog_discuss (blog_id, discuss_id, user_id)
            VALUE (#{blog_id}, #{discuss_id}, #{user_id})
    </insert>

    <!--收集最近正在讨论的微博-->
    <select id="nowTimeHot" parameterType="int" resultType="Map">
        SELECT distinct
        *,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=t.bid AND type=2) + (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=t.bid) AS nums
        FROM (
        SELECT b.*
        FROM blog AS b
        JOIN thumb_up AS tu
        ON tu.blog_id = b.bid
        UNION ALL
        SELECT b.*
        FROM blog AS b
        JOIN blog AS bc
        ON bc.comment_on = b.bid
        ) AS t
        JOIN user AS u
        on t.user_id=u.uid and t.visibility = 0
        WHERE t.release_time >= (unix_timestamp(now()) - 86400) AND t.release_time &lt;= unix_timestamp(now())
        AND u.alive = 0 AND u.is_ban = 0
        GROUP BY t.bid
        ORDER BY nums DESC, u.weight
    </select>

    <!--得到昨日讨论的微博-->
    <select id="lastTimeHot" resultType="Map">
        SELECT distinct
        *,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=t.bid AND type=2) AS commentNum,
        (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=t.bid) AS likeNum,
        (SELECT count(bl.bid) FROM blog bl WHERE bl.comment_on=t.bid AND type=2) + (SELECT count(tu.tuid) FROM thumb_up tu WHERE tu.blog_id=t.bid) AS nums
        FROM (
            SELECT b.*
            FROM blog AS b
            JOIN thumb_up AS tu
            ON tu.blog_id = b.bid
            UNION ALL
            SELECT b.*
            FROM blog AS b
            JOIN blog AS bc
            ON bc.comment_on = b.bid
        ) AS t
        JOIN user AS u
        on t.user_id=u.uid and t.visibility = 0
        WHERE t.release_time >= (unix_timestamp(now()) - 172800) AND t.release_time &lt;= (unix_timestamp(now()) - 86400)
        AND u.alive = 0 AND u.is_ban = 0
        GROUP BY t.bid
        ORDER BY nums DESC, u.weight
    </select>
    <!--用户注销，微博不可见-->
    <update id="userLeave" parameterType="int">
        UPDATE blog
        SET visibility = 1
        WHERE
            user_id = #{uid}
    </update>

    <!--得到用户所评论过的，转发过的，收藏过的，点赞过的全部内容-->
    <select id="allAboutUser" parameterType="int" resultType="Map">
        SELECT *
        FROM (
                 SELECT
                     b.content,
                     4 AS weight
                 FROM blog AS b
                 WHERE b.user_id = #{uid}
                 UNION ALL
                 SELECT
                     b.content,
                     2 AS weight
                 FROM blog AS bc
                     JOIN blog AS b
                         ON b.bid = bc.comment_on AND bc.user_id = #{uid}
                 UNION ALL
                 SELECT
                     b.content,
                     2 AS weight
                 FROM favorite AS f
                     JOIN blog AS b
                         ON b.bid = f.blog_id AND f.user_id = #{uid}
                 UNION ALL
                 SELECT
                     b.content,
                     1 AS weight
                          FROM thumb_up AS tu
                     JOIN blog AS b
                         ON b.bid = tu.blog_id AND tu.user_id = #{uid}
             ) AS t
        ORDER BY t.weight
    </select>

</mapper>