<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="weibo/UserMapper">   <!-- 命名空间，名字可以随意起，只要不冲突即可 -->
    <!-- 对象映射，可以不写 -->
    <!-- 查询功能，resultType 设置返回值类型 -->
    <select id="selectAllUser" resultType="Map">  <!-- 书写 SQL 语句 -->
        SELECT *,
        (SELECT COUNT(f.fid) FROM follow AS f WHERE u.uid=f.followed_id AND (type=0 OR type=2)) AS follerNum,
        (SELECT COUNT(tu.tuid)
        FROM thumb_up AS tu
        JOIN blog AS b
        ON tu.blog_id = b.bid
        WHERE b.user_id = u.uid) AS likeNum,
        (SELECT COUNT(b1.bid)
        FROM blog AS b1
        WHERE b1.user_id = u.uid) AS blogNum,
        (SELECT COUNT(b.bid)
        FROM blog AS b
        JOIN blog AS b2
        ON b.comment_on = b2.bid
        WHERE u.uid = b.user_id) AS forwardNum
        FROM user AS u
        WHERE u.alive = 0 AND u.last_logtime > 0
        ORDER BY u.weight DESC, u.last_logtime DESC
    </select>
    <select id="checkusername" parameterType="String" resultType="User">
        SELECT *
        FROM user
        WHERE username = #{username}
    </select>
    <select id="checkPassword" parameterType="String" resultType="User">
        SELECT *
        FROM user
        WHERE username = #{username}
    </select>
    <select id="checknickname" parameterType="String" resultType="User">
        SELECT *
        FROM user
        WHERE nickname = #{nickname}
    </select>
    <select id="getAvatar" resultType="User">
        SELECT *
        FROM user
        WHERE uid = #{uid}
    </select>

    <insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="uid">
        -- useGeneratedKeys="true" 表示给主键设置自增长
        -- keyProperty="userId"  表示将自增长后的Id赋值给实体类中的userId字段。
        -- parameterType="com.chenzhou.mybatis.User" 这个属性指向传递的参数实体类
        INSERT INTO user (username, nickname, password, sex, age, is_ban, ip_address, last_logtime, browser_sign)
        VALUES (#{username}, #{nickname}, #{password}, #{sex}, #{age}, #{is_ban}, #{ip_address}, #{last_logtime},
                #{browser_sign})
    </insert>

    <!-- 用户查询 -->
    <select id="selectUser" parameterType="Map" resultType="Map">  <!-- 书写 SQL 语句 -->
        SELECT
        u.*,
        (SELECT COUNT(f.fid) FROM follow AS f WHERE u.uid=f.followed_id AND (type=0 OR type=2)) AS follerNum,
        (SELECT COUNT(f.fid) FROM follow AS f WHERE u.uid=f.user_id AND (type=0 OR type=2)) AS folledNum
        FROM user AS u
        WHERE u.alive = 0
        <if test="keyword != null">
            AND(u.nickname LIKE "%"#{keyword}"%" OR u.motto LIKE "%"#{keyword}"%")
        </if>
        <if test="uid != null">
            AND uid = #{uid}
        </if>
        <if test="start != null">
            LIMIT #{startNum},#{endNum}
        </if>

        ORDER BY u.weight DESC, u.last_logtime DESC
    </select>

    <!-- 用户查询 -->
    <select id="getUserByUid" parameterType="int" resultType="Map">  <!-- 书写 SQL 语句 -->
        SELECT
        u.*,
        (SELECT COUNT(f.fid) FROM follow AS f WHERE u.uid=f.followed_id AND (type=0 OR type=2)) AS follerNum,
        (SELECT COUNT(f.fid) FROM follow AS f WHERE u.uid=f.user_id AND (type=0 OR type=2)) AS folledNum,
        (SELECT COUNT(b.bid) FROM blog AS b WHERE u.uid=b.user_id AND b.visibility=0 AND ( b.type = 0 or b.type = 1)) AS blogNum
        FROM user AS u
        WHERE u.alive = 0 AND uid = #{uid}
    </select>
    <!-- 用户查询byId -->
    <select id="getUserByBid" parameterType="int" resultType="int">
        SELECT blog.user_id
        FROM blog
        WHERE blog.bid = #{bid}

    </select>
    <!--得到用户总被点赞数-->
    <select id="getLikedNumByUid" parameterType="int" resultType="int">
        SELECT COUNT(tu.tuid)
        FROM thumb_up AS tu
            JOIN blog b
                ON tu.blog_id = b.bid
        WHERE b.user_id = #{uid}
    </select>

    <!--得到用户关注的所有人-->
    <select id="getFollow" parameterType="int" resultType="follow">
        SELECT *
        FROM follow
        WHERE follow.user_id = #{uid}
    </select>

    <select id="getFavorite" parameterType="int" resultType="Favorite">
        SELECT *
        FROM favorite
        WHERE favorite.user_id = #{uid}
    </select>

    <select id="getCallat" parameterType="int" resultType="CallAt">
        SELECT *
        FROM call_at
        WHERE call_at.user_id = #{uid}
    </select>


    <!--得到六个关注者头像和六个粉丝头像-->
    <select id="getFanAvatarByUid" resultType="Map">
        SELECT *
        FROM (
            (SELECT foller.avatar, foller.uid AS userid, foller.nickname, f.user_id AS fid
            FROM follow AS f
            JOIN user AS u
            ON u.uid = f.user_id AND (f.type = 0 OR f.type = 2)
            JOIN user AS foller
            ON f.followed_id = foller.uid
            WHERE u.uid = #{uid}
            LIMIT 6)
            UNION
            (SELECT foller.avatar, foller.uid AS userid, foller.nickname, f1.user_id AS fid
            FROM follow AS f1
            JOIN user AS u
            ON u.uid = f1.followed_id AND (f1.type = 0 OR f1.type = 2)
            JOIN user AS foller
            ON f1.user_id = foller.uid
            WHERE u.uid = #{uid}
            LIMIT 6)
        ) AS a

    </select>
    <!-- 设置权重 -->
    <update id="setWeight">
        UPDATE user
        SET weight = #{weight}
        WHERE
            uid = #{uid}
    </update>
    <!--将上传路径保存-->
    <update id="setImg">
        UPDATE user
        SET
        <if test="background != null">
            background = #{background}
        </if>
        <if test="avatar != null">
            avatar = #{avatar}
        </if>
        WHERE
        uid = #{uid}
    </update>

    <!--用户修改-->
    <update id="updateUser" parameterType="User">
        UPDATE user
        SET username     = #{username},
            nickname     = #{nickname},
            password     = #{password},
            sex          = #{sex},
            is_ban       = #{is_ban},
            ip_address   = #{ip_address},
            last_logtime = #{last_logtime},
            browser_sign = #{browser_sign},
            avatar = #{avatar},
            background = #{background}
        WHERE
            uid = #{uid}
    </update>

    <update id="userLeave" parameterType="int">
        UPDATE user
        SET alive = 1
        WHERE
            uid = #{uid}
    </update>

    <insert id="follow" parameterType="Follow">
        -- useGeneratedKeys="true" 表示给主键设置自增长
        -- keyProperty="userId"  表示将自增长后的Id赋值给实体类中的userId字段。
        -- parameterType="com.chenzhou.mybatis.User" 这个属性指向传递的参数实体类
        INSERT INTO follow (user_id, type, followed_id, time, visibility)
        VALUES (#{user_id}, #{type}, #{followed_id}, #{time}, #{visibility})
    </insert>

    <select id="checkFollow" parameterType="Follow">
        SELECT f.fid
        FROM follow AS f
        WHERE f.followed_id = #{followed_id} AND user_id = #{user_id}
    </select>

    <delete id="unfollow" parameterType="Follow">
        DELETE FROM follow
        WHERE user_id = #{user_id} AND followed_id = #{followed_id}
    </delete>

    <update id="initUser" parameterType="User">
        UPDATE blog
        SET visibility = 2
        WHERE
            user_id = #{uid}
    </update>

    <select id="hotUser" parameterType="int" resultType="User">
        SELECT
            *,(
                (SELECT count(tu.tuid) FROM thumb_up AS tu
                WHERE tu.user_id=u.uid
                AND tu.date >= (unix_timestamp(now()) - 86400)) +
                (SELECT count(f.fid) FROM follow AS f
                JOIN user AS fan ON f.followed_id = fan.uid AND f.time >= (unix_timestamp(now()) - 86400)) ) AS sums
        FROM user AS u
        ORDER BY sums DESC
        LIMIT 5
    </select>

    <select id="daisuki" parameterType="map" resultType="map">
        SELECT
        f.*
        FROM blog AS b
        JOIN follow AS f
        ON f.followed_id = b.user_id AND f.user_id = #{uid} AND f.type = 2
        WHERE b.release_time >= #{date} AND b.release_time &lt;= #{nowtime}
        GROUP BY f.followed_id
    </select>
</mapper>